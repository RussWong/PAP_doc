{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PAP \u672c\u9879\u76ee\u57fa\u4e8e\u94fe\u5bb6\u4e8c\u624b\u623f\u6570\u636e\u96c6\uff0c\u7ecf\u8fc7\u6570\u636e\u5904\u7406\u3001\u7279\u5f81\u5de5\u7a0b\u3001\u6a21\u578b\u8bad\u7ec3\u53ca\u9884\u6d4b\u7b49\u73af\u8282\uff0c\u5bf9\u4e8c\u624b\u623f\u6210\u4ea4\u4ef7\u5b8c\u6210\u9884\u6d4b\uff0c\u5e76\u4e14\u5bf9\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c\u89e3\u91ca\u548c\u5206\u6790\u3002 \u9879\u76ee\u6d41\u7a0b \u672c\u9879\u76ee\u4e00\u5171\u7ecf\u8fc7\u4e868\u4e2a\u6d41\u7a0b\uff1a \u4eba\u5de5\u9884\u5904\u7406\uff08\u9ec4\u5b97\u6e90\uff09 \u6570\u636e\u9884\u5904\u7406\uff08\u738b\u6cfd\u534e\uff09 \u6570\u636e\u5f02\u5e38\u68c0\u6d4b\uff08\u9ec4\u5b97\u6e90\uff09 \u6570\u636e\u7f16\u7801\uff08\u9ec4\u5b97\u6e90\uff09 \u7279\u5f81\u9009\u62e9\uff08\u5f20\u5065\u5168\uff09 \u6a21\u578b\u8bad\u7ec3\uff08\u80e1\u535a\u6587\u3001\u674e\u745e\uff09 \u6a21\u578b\u9884\u6d4b\uff08\u80e1\u535a\u6587\u3001\u674e\u745e\uff09 \u6a21\u578b\u5206\u6790\uff08\u9ec4\u5fd7\u4e3a\uff09 \u57fa\u4e8eLuigi\uff0c\u5c06\u6240\u6709\u6d41\u7a0b\u94fe\u63a5\u8d77\u6765\uff0c\u5efa\u7acb\u6d41\u7a0b\u4e4b\u95f4\u7684\u4f9d\u8d56\u6027\uff0c\u5f62\u6210\u5de5\u4f5c\u6d41\u3002 \u9879\u76ee\u76ee\u5f55 Dataset/ House/ used_house_data_test/ #\u6570\u636e\u9884\u5904\u7406\u4ee5\u53ca\u7279\u5f81\u5de5\u7a0b\u5de5\u4f5c\u6d41\u8f93\u51fa\u7684\u6570\u636e Model/ House/ used_house_data_test/ #\u6a21\u578b\u8bc4\u4f30\u4ee5\u53ca\u6a21\u578b\u5206\u6790\u5de5\u4f5c\u6d41\u8f93\u51fa\u7684\u7ed3\u679c Result/ result.csv #\u6a21\u578b\u9884\u6d4b\u7ed3\u679c main.py #\u4e3b\u51fd\u6570 handpreprocessing.py missing.py fucset.py train.py analysis.py README.md \u8fd0\u884c\u65b9\u6cd5 python -m luigi --module main Hand --local-scheduler - \u4eba\u5de5\u9884\u5904\u7406 \uff0c\u8f93\u51fa\u539f\u59cb\u6570\u636e\u4eba\u5de5\u9884\u5904\u7406\u540e\u7684\u6570\u636e\u96c6 python -m luigi --module main Preprocessing --local-scheduler - \u6570\u636e\u9884\u5904\u7406 \uff0c\u8f93\u51fa\u6570\u636e\u9884\u5904\u7406\u540e\u7684\u6570\u636e\u96c6 python -m luigi --module main Anomaly --local-scheduler - \u5f02\u5e38\u68c0\u6d4b \uff0c\u8f93\u51fa\u5f02\u5e38\u68c0\u6d4b\u540e\u7684\u6570\u636e\u96c6 python -m luigi --module main Encoding --local-scheduler - \u7279\u5f81\u7f16\u7801 \uff0c\u8f93\u51fatarget encoding\u540e\u7684\u6570\u636e\u96c6 python -m luigi --module main FeatureSelection --name-of-feature 15 --local-scheduler - \u7279\u5f81\u9009\u62e9 \uff0c\u8f93\u51fa\u7279\u5f81\u9009\u62e9\u540e\u8fd8\u526915\u4e2a\u6700\u91cd\u8981\u7279\u5f81\u7684\u6570\u636e\u96c6 python -m luigi --module main BRreg/XGBreg/Lreg/Breg/GBreg --name-of-model \u6a21\u578b\u540d\u79f0 --local-scheduler - \u8bad\u7ec3\u6a21\u578b \uff0c\u6a21\u578b\u540d\u79f0\u53ef\u9009 bayesianridge , xgboost , lasso , bagging , gradientboosting python -m luigi --module main Analysis --name-of-model \u6a21\u578b\u540d\u79f0 --local-scheduler - \u6a21\u578b\u5206\u6790 \uff0c\u8f93\u51fa\u8be5\u6a21\u578b\u4e2d\u7279\u5f81\u5bf9\u9884\u6d4b\u7ed3\u679c\u7684\u8d21\u732e\u56fe\uff0c\u6a21\u578b\u540d\u79f0\u53ef\u9009 bayesianridge , xgboost , lasso , bagging , gradientboosting","title":"PAP"},{"location":"#pap","text":"\u672c\u9879\u76ee\u57fa\u4e8e\u94fe\u5bb6\u4e8c\u624b\u623f\u6570\u636e\u96c6\uff0c\u7ecf\u8fc7\u6570\u636e\u5904\u7406\u3001\u7279\u5f81\u5de5\u7a0b\u3001\u6a21\u578b\u8bad\u7ec3\u53ca\u9884\u6d4b\u7b49\u73af\u8282\uff0c\u5bf9\u4e8c\u624b\u623f\u6210\u4ea4\u4ef7\u5b8c\u6210\u9884\u6d4b\uff0c\u5e76\u4e14\u5bf9\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c\u89e3\u91ca\u548c\u5206\u6790\u3002","title":"PAP"},{"location":"#_1","text":"\u672c\u9879\u76ee\u4e00\u5171\u7ecf\u8fc7\u4e868\u4e2a\u6d41\u7a0b\uff1a \u4eba\u5de5\u9884\u5904\u7406\uff08\u9ec4\u5b97\u6e90\uff09 \u6570\u636e\u9884\u5904\u7406\uff08\u738b\u6cfd\u534e\uff09 \u6570\u636e\u5f02\u5e38\u68c0\u6d4b\uff08\u9ec4\u5b97\u6e90\uff09 \u6570\u636e\u7f16\u7801\uff08\u9ec4\u5b97\u6e90\uff09 \u7279\u5f81\u9009\u62e9\uff08\u5f20\u5065\u5168\uff09 \u6a21\u578b\u8bad\u7ec3\uff08\u80e1\u535a\u6587\u3001\u674e\u745e\uff09 \u6a21\u578b\u9884\u6d4b\uff08\u80e1\u535a\u6587\u3001\u674e\u745e\uff09 \u6a21\u578b\u5206\u6790\uff08\u9ec4\u5fd7\u4e3a\uff09 \u57fa\u4e8eLuigi\uff0c\u5c06\u6240\u6709\u6d41\u7a0b\u94fe\u63a5\u8d77\u6765\uff0c\u5efa\u7acb\u6d41\u7a0b\u4e4b\u95f4\u7684\u4f9d\u8d56\u6027\uff0c\u5f62\u6210\u5de5\u4f5c\u6d41\u3002","title":"\u9879\u76ee\u6d41\u7a0b"},{"location":"#_2","text":"Dataset/ House/ used_house_data_test/ #\u6570\u636e\u9884\u5904\u7406\u4ee5\u53ca\u7279\u5f81\u5de5\u7a0b\u5de5\u4f5c\u6d41\u8f93\u51fa\u7684\u6570\u636e Model/ House/ used_house_data_test/ #\u6a21\u578b\u8bc4\u4f30\u4ee5\u53ca\u6a21\u578b\u5206\u6790\u5de5\u4f5c\u6d41\u8f93\u51fa\u7684\u7ed3\u679c Result/ result.csv #\u6a21\u578b\u9884\u6d4b\u7ed3\u679c main.py #\u4e3b\u51fd\u6570 handpreprocessing.py missing.py fucset.py train.py analysis.py README.md","title":"\u9879\u76ee\u76ee\u5f55"},{"location":"#_3","text":"python -m luigi --module main Hand --local-scheduler - \u4eba\u5de5\u9884\u5904\u7406 \uff0c\u8f93\u51fa\u539f\u59cb\u6570\u636e\u4eba\u5de5\u9884\u5904\u7406\u540e\u7684\u6570\u636e\u96c6 python -m luigi --module main Preprocessing --local-scheduler - \u6570\u636e\u9884\u5904\u7406 \uff0c\u8f93\u51fa\u6570\u636e\u9884\u5904\u7406\u540e\u7684\u6570\u636e\u96c6 python -m luigi --module main Anomaly --local-scheduler - \u5f02\u5e38\u68c0\u6d4b \uff0c\u8f93\u51fa\u5f02\u5e38\u68c0\u6d4b\u540e\u7684\u6570\u636e\u96c6 python -m luigi --module main Encoding --local-scheduler - \u7279\u5f81\u7f16\u7801 \uff0c\u8f93\u51fatarget encoding\u540e\u7684\u6570\u636e\u96c6 python -m luigi --module main FeatureSelection --name-of-feature 15 --local-scheduler - \u7279\u5f81\u9009\u62e9 \uff0c\u8f93\u51fa\u7279\u5f81\u9009\u62e9\u540e\u8fd8\u526915\u4e2a\u6700\u91cd\u8981\u7279\u5f81\u7684\u6570\u636e\u96c6 python -m luigi --module main BRreg/XGBreg/Lreg/Breg/GBreg --name-of-model \u6a21\u578b\u540d\u79f0 --local-scheduler - \u8bad\u7ec3\u6a21\u578b \uff0c\u6a21\u578b\u540d\u79f0\u53ef\u9009 bayesianridge , xgboost , lasso , bagging , gradientboosting python -m luigi --module main Analysis --name-of-model \u6a21\u578b\u540d\u79f0 --local-scheduler - \u6a21\u578b\u5206\u6790 \uff0c\u8f93\u51fa\u8be5\u6a21\u578b\u4e2d\u7279\u5f81\u5bf9\u9884\u6d4b\u7ed3\u679c\u7684\u8d21\u732e\u56fe\uff0c\u6a21\u578b\u540d\u79f0\u53ef\u9009 bayesianridge , xgboost , lasso , bagging , gradientboosting","title":"\u8fd0\u884c\u65b9\u6cd5"},{"location":"analysis/","text":"\u6a21\u578b\u5206\u6790 \u6a21\u578b\u5206\u6790\u6a21\u5757\u7684\u529f\u80fd\uff1a\u5bf9\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u63d0\u4f9b\u53ef\u89e3\u91ca\u3002 \u4ece\u4ee5\u4e0b\u4e24\u4e2a\u89d2\u5ea6\u51fa\u53d1\uff1a Shapley\uff1a\u5c06\u6a21\u578b\u5bf9\u4e8e\u6837\u672c\u7684\u9884\u6d4b\u89e3\u91ca\u4e3a\u6bcf\u4e2a\u7279\u5f81\u5bf9\u9884\u6d4b\u7ed3\u679c\u7684\u8d21\u732e\u503c\u4e4b\u548c\uff0c\u6bcf\u4e2a\u7279\u5f81\u5bf9\u9884\u6d4b\u7ed3\u679c\u7684\u8d21\u732e\u503c\u53ef\u8868\u793a\u4e3a\uff1a $$ f\\left( { X } { j } \\right) =E\\left[ f\\left( z \\right) |z={ X } { i },i=1,2,...,j \\right] $$ \u5168\u5c40\u7ebf\u6027\u66ff\u4ee3\u6a21\u578b\uff1a\u8bad\u7ec3\u7684\u6a21\u578b\u4e3a\u9ed1\u76d2\u6a21\u578b\uff0c\u96be\u4ee5\u76f4\u63a5\u8ba9\u4eba\u7406\u89e3\uff0c\u4f7f\u7528\u7b80\u5355\u7684\u7ebf\u6027\u6a21\u578b\u6765\u903c\u8fd1\u8be5\u6a21\u578b\uff0c\u4ece\u800c\u8ba9\u4eba\u7406\u89e3\u5b83\u7684\u9884\u6d4b\u7ed3\u679c\u3002 \u6b8b\u5dee\u56fe\uff1a\u8868\u5f81\u6a21\u578b\u5bf9\u591a\u4e2a\u6837\u672c\u7684\u9884\u6d4b\u503c\u4e0e\u771f\u5b9e\u503c\u4e4b\u5dee\u3002 Shapley Shapley\u6a21\u5757\u8fd4\u56de\u5404\u4e2a\u7279\u5f81\u5bf9\u5404\u4e2a\u6837\u672c\u7684\u5e73\u5747Shapley\u503c\uff0c\u4ee5\u53ca\u5404\u4e2a\u7279\u5f81\u5bf9\u6bcf\u4e00\u4e2a\u6837\u672c\u7684\u9884\u6d4b\u7ed3\u679c\u8d21\u732e\u56fe\u3002Shapley\u503c\u7684\u7edd\u5bf9\u503c\u8d8a\u9ad8\u4ee3\u8868\u8be5\u7279\u5f81\u5bf9\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u7684\u5f71\u54cd\u8d8a\u5927\u3002 \u5173\u952e\u4ee3\u7801\u5757\u5982\u4e0b\uff1a import shap import numpy as np def shapley(model,X): ''' params: model:\u6a21\u578b X:\u8bad\u7ec3\u8be5\u6a21\u578b\u7684\u8bad\u7ec3\u96c6 return:\u6240\u6709\u7279\u5f81\u5bf9\u6240\u6709\u6837\u672c\u7684\u5e73\u5747Shapley\u503c ''' explainer = shap.TreeExplainer(model) shap_values = explainer.shap_values(X) shap.force_plot(explainer.expected_value, shap_values[0,:], X.iloc[0,:]) shap_mean=np.mean(abs(shap_values),axis=0) return shap_mean \u7ed3\u679c\u5982\u4e0b\uff1a \u5168\u5c40\u7ebf\u6027\u66ff\u4ee3\u6a21\u578b \u5168\u5c40\u7ebf\u6027\u66ff\u4ee3\u6a21\u578b\u8fd4\u56de\u5404\u4e2a\u7279\u5f81\u7684\u56de\u5f52\u7cfb\u6570\uff0c\u56de\u5f52\u7cfb\u6570\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u4ee3\u8868\u8be5\u7279\u5f81\u5bf9\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u7684\u5f71\u54cd\u8d8a\u5927\u3002 \u5173\u952e\u4ee3\u7801\u5757\u5982\u4e0b\uff1a from sklearn import Linear_model import numpy as np import pandas as pd def globalsurrogate(testdata,model,X): \"\"\" params: testdata:\u8be5\u6a21\u578b\u7684\u6d4b\u8bd5\u96c6 model\uff1a\u6a21\u578b X\uff1a\u8be5\u6a21\u578b\u7684\u8bad\u7ec3\u96c6 \"\"\" price=model.predict(testdata) coef_list=[] data = getData(userData_pred=price[0], X=X) X_=data.drop(['Final_Price','Label'],axis=1) y=data['Final_Price'] g=linear_model.LinearRegression(fit_intercept=False) g.fit(X_, y) coef_list.append(g.coef_) return coef_list def getData(): \"\"\" \u529f\u80fd\uff1a\u83b7\u53d6\u4e0e\u9884\u6d4b\u7ed3\u679c\u4e00\u6863\u7684\u5bf9\u5e94\u7684\u5b50\u6570\u636e\u96c6 \"\"\" \u7ed3\u679c\u5982\u4e0b\uff1a \u6b8b\u5dee\u56fe \u5173\u952e\u4ee3\u7801\u5757\uff1a from yellowbrick.regressor import ResidualsPlot def residuals_plot(model, X_test, y_test,road): \"\"\" param model : \u5df2\u8bad\u7ec3\u597d\u7684\u6a21\u578b X_test : \u6d4b\u8bd5\u96c6\u6570\u636e y_test : \u6d4b\u8bd5\u96c6\u6807\u7b7e \"\"\" visualizer = ResidualsPlot(model) visualizer.score(X_test, y_test) visualizer.poof(road) \u8f93\u51fa\u7ed3\u679c\uff1a\uff08\u4ee5xgboost\u6a21\u578b\u4e3a\u4f8b\uff09","title":"\u6a21\u578b\u5206\u6790"},{"location":"analysis/#_1","text":"\u6a21\u578b\u5206\u6790\u6a21\u5757\u7684\u529f\u80fd\uff1a\u5bf9\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u63d0\u4f9b\u53ef\u89e3\u91ca\u3002 \u4ece\u4ee5\u4e0b\u4e24\u4e2a\u89d2\u5ea6\u51fa\u53d1\uff1a Shapley\uff1a\u5c06\u6a21\u578b\u5bf9\u4e8e\u6837\u672c\u7684\u9884\u6d4b\u89e3\u91ca\u4e3a\u6bcf\u4e2a\u7279\u5f81\u5bf9\u9884\u6d4b\u7ed3\u679c\u7684\u8d21\u732e\u503c\u4e4b\u548c\uff0c\u6bcf\u4e2a\u7279\u5f81\u5bf9\u9884\u6d4b\u7ed3\u679c\u7684\u8d21\u732e\u503c\u53ef\u8868\u793a\u4e3a\uff1a $$ f\\left( { X } { j } \\right) =E\\left[ f\\left( z \\right) |z={ X } { i },i=1,2,...,j \\right] $$ \u5168\u5c40\u7ebf\u6027\u66ff\u4ee3\u6a21\u578b\uff1a\u8bad\u7ec3\u7684\u6a21\u578b\u4e3a\u9ed1\u76d2\u6a21\u578b\uff0c\u96be\u4ee5\u76f4\u63a5\u8ba9\u4eba\u7406\u89e3\uff0c\u4f7f\u7528\u7b80\u5355\u7684\u7ebf\u6027\u6a21\u578b\u6765\u903c\u8fd1\u8be5\u6a21\u578b\uff0c\u4ece\u800c\u8ba9\u4eba\u7406\u89e3\u5b83\u7684\u9884\u6d4b\u7ed3\u679c\u3002 \u6b8b\u5dee\u56fe\uff1a\u8868\u5f81\u6a21\u578b\u5bf9\u591a\u4e2a\u6837\u672c\u7684\u9884\u6d4b\u503c\u4e0e\u771f\u5b9e\u503c\u4e4b\u5dee\u3002","title":"\u6a21\u578b\u5206\u6790"},{"location":"analysis/#shapley","text":"Shapley\u6a21\u5757\u8fd4\u56de\u5404\u4e2a\u7279\u5f81\u5bf9\u5404\u4e2a\u6837\u672c\u7684\u5e73\u5747Shapley\u503c\uff0c\u4ee5\u53ca\u5404\u4e2a\u7279\u5f81\u5bf9\u6bcf\u4e00\u4e2a\u6837\u672c\u7684\u9884\u6d4b\u7ed3\u679c\u8d21\u732e\u56fe\u3002Shapley\u503c\u7684\u7edd\u5bf9\u503c\u8d8a\u9ad8\u4ee3\u8868\u8be5\u7279\u5f81\u5bf9\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u7684\u5f71\u54cd\u8d8a\u5927\u3002 \u5173\u952e\u4ee3\u7801\u5757\u5982\u4e0b\uff1a import shap import numpy as np def shapley(model,X): ''' params: model:\u6a21\u578b X:\u8bad\u7ec3\u8be5\u6a21\u578b\u7684\u8bad\u7ec3\u96c6 return:\u6240\u6709\u7279\u5f81\u5bf9\u6240\u6709\u6837\u672c\u7684\u5e73\u5747Shapley\u503c ''' explainer = shap.TreeExplainer(model) shap_values = explainer.shap_values(X) shap.force_plot(explainer.expected_value, shap_values[0,:], X.iloc[0,:]) shap_mean=np.mean(abs(shap_values),axis=0) return shap_mean \u7ed3\u679c\u5982\u4e0b\uff1a","title":"Shapley"},{"location":"analysis/#_2","text":"\u5168\u5c40\u7ebf\u6027\u66ff\u4ee3\u6a21\u578b\u8fd4\u56de\u5404\u4e2a\u7279\u5f81\u7684\u56de\u5f52\u7cfb\u6570\uff0c\u56de\u5f52\u7cfb\u6570\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u4ee3\u8868\u8be5\u7279\u5f81\u5bf9\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u7684\u5f71\u54cd\u8d8a\u5927\u3002 \u5173\u952e\u4ee3\u7801\u5757\u5982\u4e0b\uff1a from sklearn import Linear_model import numpy as np import pandas as pd def globalsurrogate(testdata,model,X): \"\"\" params: testdata:\u8be5\u6a21\u578b\u7684\u6d4b\u8bd5\u96c6 model\uff1a\u6a21\u578b X\uff1a\u8be5\u6a21\u578b\u7684\u8bad\u7ec3\u96c6 \"\"\" price=model.predict(testdata) coef_list=[] data = getData(userData_pred=price[0], X=X) X_=data.drop(['Final_Price','Label'],axis=1) y=data['Final_Price'] g=linear_model.LinearRegression(fit_intercept=False) g.fit(X_, y) coef_list.append(g.coef_) return coef_list def getData(): \"\"\" \u529f\u80fd\uff1a\u83b7\u53d6\u4e0e\u9884\u6d4b\u7ed3\u679c\u4e00\u6863\u7684\u5bf9\u5e94\u7684\u5b50\u6570\u636e\u96c6 \"\"\" \u7ed3\u679c\u5982\u4e0b\uff1a","title":"\u5168\u5c40\u7ebf\u6027\u66ff\u4ee3\u6a21\u578b"},{"location":"analysis/#_3","text":"\u5173\u952e\u4ee3\u7801\u5757\uff1a from yellowbrick.regressor import ResidualsPlot def residuals_plot(model, X_test, y_test,road): \"\"\" param model : \u5df2\u8bad\u7ec3\u597d\u7684\u6a21\u578b X_test : \u6d4b\u8bd5\u96c6\u6570\u636e y_test : \u6d4b\u8bd5\u96c6\u6807\u7b7e \"\"\" visualizer = ResidualsPlot(model) visualizer.score(X_test, y_test) visualizer.poof(road) \u8f93\u51fa\u7ed3\u679c\uff1a\uff08\u4ee5xgboost\u6a21\u578b\u4e3a\u4f8b\uff09","title":"\u6b8b\u5dee\u56fe"},{"location":"data_anomaly/","text":"\u5f02\u5e38\u68c0\u6d4b \u68c0\u6d4b\u6570\u636e\u96c6\u4e2d\u7684\u5f02\u5e38\u6570\u636e\u5e76\u5254\u9664\u3002 \u4e3b\u8981\u4f7f\u7528\u5b64\u7acb\u68ee\u6797\u7684\u65b9\u6cd5: \u5b64\u7acb\u68ee\u6797\u6cd5\uff08Isolation Forest\uff09\u662f\u4e00\u79cd\u88ab\u5e7f\u6cdb\u91c7\u7528\u7684\u96c6\u6210\u5f02\u5e38\u68c0\u6d4b\u7b97\u6cd5\u3002\u5b64\u7acb\u68ee\u6797\u7531\u4e00\u7cfb\u5217\u5b64\u7acb \u6811\u7ec4\u6210\uff0c\u6bcf\u4e00\u9897\u5b64\u7acb\u6811\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u6784\u3002\u5177\u4f53\u5b9e\u73b0\u6b65\u9aa4\u5982\u4e0b\uff1a \u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u5b9a\u6570\u91cf\u6837\u672c\u4f5c\u4e3a\u5b50\u7a7a\u95f4\u653e\u5165\u5b64\u7acb\u6811\u6839\u8282\u70b9 \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5e76\u968f\u673a\u4ea7\u751f\u5207\u5272\u70b9\u5c06\u6570\u636e\u5728\u6b64\u7ef4\u5ea6\u4e0b\u5207\u5206\u4e3a\u4e24\u4e2a\u5b50\u96c6\u3002 \u9012\u5f52\u4e0a\u4e00\u6b65\u9aa4\u76f4\u5230\u5b50\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u6837\u672c\u70b9\u6216\u8005\u5b64\u7acb\u6811\u8fbe\u5230\u6307\u5b9a\u9ad8\u5ea6 \u5faa\u73af\u4e0a\u8ff0\u6b65\u9aa4\u76f4\u5230\u751f\u6210\u4e86\u6307\u5b9a\u4e2a\u6570\u7684\u5b64\u7acb\u6811 \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u70b9\uff0c\u8ba1\u7b97\u5176\u5728\u6bcf\u68f5\u6811\u7684\u9ad8\u5ea6\u5e76\u53d6\u5e73\u5747\u503c\uff0c\u5f97\u5230\u5f02\u5e38\u5206\u6570 \u8bbe\u5b9a\u9608\u503c\u5224\u65ad\u6570\u636e\u5f02\u5e38\u3002 \u9879\u76ee\u5b9e\u4f8b \u5728\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u8c03\u7528sklearn\u4e2d\u7684\u96c6\u6210\u6a21\u578bIsolationForest\u5b8c\u6210\u5f02\u5e38\u68c0\u6d4b\u529f\u80fd\uff0c\u5e76\u4f7f\u7528matplotlib\u8fdb\u884c\u753b\u56fe\u3002 \u7531\u4e8e\u4e00\u6b21\u68c0\u6d4b\u5177\u6709\u5076\u7136\u6027\uff0c\u56e0\u6b64\u8fdb\u884c\u591a\u6b21\u68c0\u6d4b\u8fed\u4ee3\u3002\u5f53\u68c0\u6d4b\u7ed3\u679c\u7a33\u5b9a\u65f6\uff0c\u7ec8\u6b62\u68c0\u6d4b\uff0c\u5e76\u5254\u9664\u5f02\u5e38\u6570\u636e\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a from sklearn.ensemble import IsolationForest clf = IsolationForest(behaviour='new', contamination='auto') pred = clf.fit_predict(data) data['Outlier'] = pred tmp = list((set(res) & set(list(data[data['Outlier']==-1].index)))) if len(tmp) == len(res): plt_anomaly(data,ylabel,path) data.drop(res, inplace=True) data.reset_index(drop=True, inplace=True) break else\uff1a res = tmp data.drop('Outlier', axis=1, inplace=True) \u753b\u56fe\u793a\u4f8b\u5982\u4e0b\uff1a","title":"\u5f02\u5e38\u68c0\u6d4b"},{"location":"data_anomaly/#_1","text":"\u68c0\u6d4b\u6570\u636e\u96c6\u4e2d\u7684\u5f02\u5e38\u6570\u636e\u5e76\u5254\u9664\u3002 \u4e3b\u8981\u4f7f\u7528\u5b64\u7acb\u68ee\u6797\u7684\u65b9\u6cd5: \u5b64\u7acb\u68ee\u6797\u6cd5\uff08Isolation Forest\uff09\u662f\u4e00\u79cd\u88ab\u5e7f\u6cdb\u91c7\u7528\u7684\u96c6\u6210\u5f02\u5e38\u68c0\u6d4b\u7b97\u6cd5\u3002\u5b64\u7acb\u68ee\u6797\u7531\u4e00\u7cfb\u5217\u5b64\u7acb \u6811\u7ec4\u6210\uff0c\u6bcf\u4e00\u9897\u5b64\u7acb\u6811\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u6784\u3002\u5177\u4f53\u5b9e\u73b0\u6b65\u9aa4\u5982\u4e0b\uff1a \u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u5b9a\u6570\u91cf\u6837\u672c\u4f5c\u4e3a\u5b50\u7a7a\u95f4\u653e\u5165\u5b64\u7acb\u6811\u6839\u8282\u70b9 \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5e76\u968f\u673a\u4ea7\u751f\u5207\u5272\u70b9\u5c06\u6570\u636e\u5728\u6b64\u7ef4\u5ea6\u4e0b\u5207\u5206\u4e3a\u4e24\u4e2a\u5b50\u96c6\u3002 \u9012\u5f52\u4e0a\u4e00\u6b65\u9aa4\u76f4\u5230\u5b50\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u6837\u672c\u70b9\u6216\u8005\u5b64\u7acb\u6811\u8fbe\u5230\u6307\u5b9a\u9ad8\u5ea6 \u5faa\u73af\u4e0a\u8ff0\u6b65\u9aa4\u76f4\u5230\u751f\u6210\u4e86\u6307\u5b9a\u4e2a\u6570\u7684\u5b64\u7acb\u6811 \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u70b9\uff0c\u8ba1\u7b97\u5176\u5728\u6bcf\u68f5\u6811\u7684\u9ad8\u5ea6\u5e76\u53d6\u5e73\u5747\u503c\uff0c\u5f97\u5230\u5f02\u5e38\u5206\u6570 \u8bbe\u5b9a\u9608\u503c\u5224\u65ad\u6570\u636e\u5f02\u5e38\u3002","title":"\u5f02\u5e38\u68c0\u6d4b"},{"location":"data_anomaly/#_2","text":"\u5728\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u8c03\u7528sklearn\u4e2d\u7684\u96c6\u6210\u6a21\u578bIsolationForest\u5b8c\u6210\u5f02\u5e38\u68c0\u6d4b\u529f\u80fd\uff0c\u5e76\u4f7f\u7528matplotlib\u8fdb\u884c\u753b\u56fe\u3002 \u7531\u4e8e\u4e00\u6b21\u68c0\u6d4b\u5177\u6709\u5076\u7136\u6027\uff0c\u56e0\u6b64\u8fdb\u884c\u591a\u6b21\u68c0\u6d4b\u8fed\u4ee3\u3002\u5f53\u68c0\u6d4b\u7ed3\u679c\u7a33\u5b9a\u65f6\uff0c\u7ec8\u6b62\u68c0\u6d4b\uff0c\u5e76\u5254\u9664\u5f02\u5e38\u6570\u636e\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a from sklearn.ensemble import IsolationForest clf = IsolationForest(behaviour='new', contamination='auto') pred = clf.fit_predict(data) data['Outlier'] = pred tmp = list((set(res) & set(list(data[data['Outlier']==-1].index)))) if len(tmp) == len(res): plt_anomaly(data,ylabel,path) data.drop(res, inplace=True) data.reset_index(drop=True, inplace=True) break else\uff1a res = tmp data.drop('Outlier', axis=1, inplace=True) \u753b\u56fe\u793a\u4f8b\u5982\u4e0b\uff1a","title":"\u9879\u76ee\u5b9e\u4f8b"},{"location":"data_preprocessing/","text":"\u4eba\u5de5\u6570\u636e\u5904\u7406 \u9488\u5bf9\u6570\u636e\u96c6\u7684\u7279\u5f02\u6027\uff0c\u8fdb\u884c\u4eba\u5de5\u7684\u8c03\u6574\u3002 \u4e3b\u8981\u6d89\u53ca\u4e09\u4e2a\u65b9\u9762: \u7279\u5f81\u63d0\u53d6\uff1a\u5c06\u7279\u5f81\u5b57\u6bb5\u4e2d\u6709\u610f\u4e49\u7684\u90e8\u5206\u63d0\u53d6\u51fa\u6765 \u7279\u5f81\u8c03\u6574\uff1a\u6839\u636e\u5148\u9a8c\u77e5\u8bc6\uff0c\u5c06\u7279\u5f81\u8fdb\u884c\u8c03\u6574\u3002\u6bd4\u5982\u7279\u5f81\u7ec4\u5408\u91cd\u6784\u3001\u65e0\u610f\u4e49\u7279\u5f81\u5220\u9664\u7b49 \u7279\u5b9a\u5904\u7406\uff1a\u6839\u636e\u7279\u5b9a\u9886\u57df\u8fdb\u884c\u7684\u5904\u7406\u64cd\u4f5c\u3002\u5982\u623f\u4ea7\u6570\u636e\u4e2d\u5730\u7406\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u7ecf\u7eac\u5ea6\u3002 \u9879\u76ee\u5b9e\u4f8b \u672c\u623f\u4ea7\u6570\u636e\u7684\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u8fdb\u884c\u4e86\u7279\u5f81\u8c03\u6574\u4e0e\u7279\u5b9a\u5904\u7406\u4e24\u65b9\u9762\u64cd\u4f5c\u3002 \u7279\u5f81\u8c03\u6574 \u7279\u5f81\u7ec4\u5408\uff1a\u5c06\u201c\u533a\u57df\u201d\u3001\u201c\u8def\u6bb5\u201d\u3001\u201c\u5c0f\u533a\u540d\u201d\u7ec4\u5408\u6210\u201c\u5730\u7406\u4f4d\u7f6e\u201d\u4e00\u4e2a\u7279\u5f81\u3002 \u7279\u5f81\u5220\u9664\uff1a\u5c06\u201c\u4ea4\u6613\u65f6\u95f4\u201d\u3001\u201cID\u201d\u7b49\u7279\u5f81\u5220\u9664\u3002 \u7279\u5b9a\u5904\u7406 \u7ecf\u7eac\u5ea6\u8f6c\u6362\uff1a\u901a\u8fc7\u767e\u5ea6\u5730\u56fe\u63d0\u4f9b\u7684API\u63a5\u53e3\uff0c\u5c06\u5730\u7406\u4f4d\u7f6e\u8f6c\u6362\u6210\u7ecf\u7eac\u5ea6\u6570\u636e\u3002\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a def Latlng(location): url = 'http://api.map.baidu.com/geocoder?address=' + location +'&output=json' html = requests.get(url,headers={'Connection':'close'}) json1 = BeautifulSoup(html.text,'html.parser') text = json.loads(json1.text) lat = text['result']['location']['lat'] lng = text['result']['location']['lng'] return {'lat':lat,'lng':lng} \u6570\u636e\u9884\u5904\u7406 \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u64cd\u4f5c\u3002 \u4e3b\u8981\u6d89\u53ca\u56db\u4e2a\u65b9\u9762: \u6570\u636e\u6982\u8ff0\uff1a \u6570\u636e\u53bb\u91cd\uff1a\u53bb\u9664\u91cd\u590d\u6570\u636e\u3002 \u6570\u636e\u6807\u51c6\u5316\uff1a\u5c06\u6570\u503c\u578b\u6570\u636e\u6807\u51c6\u5316\u5904\u7406\u3002 \u7f3a\u5931\u5904\u7406\uff1a \u9879\u76ee\u5b9e\u4f8b \u6570\u636e\u6982\u8ff0 \u529f\u80fd1 \u529f\u80fd2 \u5f85\u6cfd\u534e\u7f16\u5199 \u6570\u636e\u53bb\u91cd \u53bb\u9664\u91cd\u590d\u6570\u636e\u3002\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a data.drop_duplicates(keep='first', inplace=True) data.reset_index(drop=True,inplace=True) \u6570\u636e\u6807\u51c6\u5316 \u6570\u503c\u53d8\u91cf\u6807\u51c6\u5316\u3002 RobustScaler\u662fsklearn\u5e93\u4e2d\u7684\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u5668\uff0c\u5bf9\u5b58\u5728\u5f02\u5e38\u7684\u6570\u636e\u5177\u6709\u8f83\u597d\u9c81\u68d2\u6027\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a from sklearn.preprocessing import RobustScaler data[cols] = pd.DataFrame(RobustScaler().fit_transform(data[cols]),columns=cols) \u7f3a\u5931\u5904\u7406 \u5f85\u6cfd\u534e\u7f16\u5199","title":"\u6570\u636e\u9884\u5904\u7406"},{"location":"data_preprocessing/#_1","text":"\u9488\u5bf9\u6570\u636e\u96c6\u7684\u7279\u5f02\u6027\uff0c\u8fdb\u884c\u4eba\u5de5\u7684\u8c03\u6574\u3002 \u4e3b\u8981\u6d89\u53ca\u4e09\u4e2a\u65b9\u9762: \u7279\u5f81\u63d0\u53d6\uff1a\u5c06\u7279\u5f81\u5b57\u6bb5\u4e2d\u6709\u610f\u4e49\u7684\u90e8\u5206\u63d0\u53d6\u51fa\u6765 \u7279\u5f81\u8c03\u6574\uff1a\u6839\u636e\u5148\u9a8c\u77e5\u8bc6\uff0c\u5c06\u7279\u5f81\u8fdb\u884c\u8c03\u6574\u3002\u6bd4\u5982\u7279\u5f81\u7ec4\u5408\u91cd\u6784\u3001\u65e0\u610f\u4e49\u7279\u5f81\u5220\u9664\u7b49 \u7279\u5b9a\u5904\u7406\uff1a\u6839\u636e\u7279\u5b9a\u9886\u57df\u8fdb\u884c\u7684\u5904\u7406\u64cd\u4f5c\u3002\u5982\u623f\u4ea7\u6570\u636e\u4e2d\u5730\u7406\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u7ecf\u7eac\u5ea6\u3002","title":"\u4eba\u5de5\u6570\u636e\u5904\u7406"},{"location":"data_preprocessing/#_2","text":"\u672c\u623f\u4ea7\u6570\u636e\u7684\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u8fdb\u884c\u4e86\u7279\u5f81\u8c03\u6574\u4e0e\u7279\u5b9a\u5904\u7406\u4e24\u65b9\u9762\u64cd\u4f5c\u3002 \u7279\u5f81\u8c03\u6574 \u7279\u5f81\u7ec4\u5408\uff1a\u5c06\u201c\u533a\u57df\u201d\u3001\u201c\u8def\u6bb5\u201d\u3001\u201c\u5c0f\u533a\u540d\u201d\u7ec4\u5408\u6210\u201c\u5730\u7406\u4f4d\u7f6e\u201d\u4e00\u4e2a\u7279\u5f81\u3002 \u7279\u5f81\u5220\u9664\uff1a\u5c06\u201c\u4ea4\u6613\u65f6\u95f4\u201d\u3001\u201cID\u201d\u7b49\u7279\u5f81\u5220\u9664\u3002 \u7279\u5b9a\u5904\u7406 \u7ecf\u7eac\u5ea6\u8f6c\u6362\uff1a\u901a\u8fc7\u767e\u5ea6\u5730\u56fe\u63d0\u4f9b\u7684API\u63a5\u53e3\uff0c\u5c06\u5730\u7406\u4f4d\u7f6e\u8f6c\u6362\u6210\u7ecf\u7eac\u5ea6\u6570\u636e\u3002\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a def Latlng(location): url = 'http://api.map.baidu.com/geocoder?address=' + location +'&output=json' html = requests.get(url,headers={'Connection':'close'}) json1 = BeautifulSoup(html.text,'html.parser') text = json.loads(json1.text) lat = text['result']['location']['lat'] lng = text['result']['location']['lng'] return {'lat':lat,'lng':lng}","title":"\u9879\u76ee\u5b9e\u4f8b"},{"location":"data_preprocessing/#_3","text":"\u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u64cd\u4f5c\u3002 \u4e3b\u8981\u6d89\u53ca\u56db\u4e2a\u65b9\u9762: \u6570\u636e\u6982\u8ff0\uff1a \u6570\u636e\u53bb\u91cd\uff1a\u53bb\u9664\u91cd\u590d\u6570\u636e\u3002 \u6570\u636e\u6807\u51c6\u5316\uff1a\u5c06\u6570\u503c\u578b\u6570\u636e\u6807\u51c6\u5316\u5904\u7406\u3002 \u7f3a\u5931\u5904\u7406\uff1a","title":"\u6570\u636e\u9884\u5904\u7406"},{"location":"data_preprocessing/#_4","text":"\u6570\u636e\u6982\u8ff0 \u529f\u80fd1 \u529f\u80fd2 \u5f85\u6cfd\u534e\u7f16\u5199 \u6570\u636e\u53bb\u91cd \u53bb\u9664\u91cd\u590d\u6570\u636e\u3002\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a data.drop_duplicates(keep='first', inplace=True) data.reset_index(drop=True,inplace=True) \u6570\u636e\u6807\u51c6\u5316 \u6570\u503c\u53d8\u91cf\u6807\u51c6\u5316\u3002 RobustScaler\u662fsklearn\u5e93\u4e2d\u7684\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\u5668\uff0c\u5bf9\u5b58\u5728\u5f02\u5e38\u7684\u6570\u636e\u5177\u6709\u8f83\u597d\u9c81\u68d2\u6027\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a from sklearn.preprocessing import RobustScaler data[cols] = pd.DataFrame(RobustScaler().fit_transform(data[cols]),columns=cols) \u7f3a\u5931\u5904\u7406 \u5f85\u6cfd\u534e\u7f16\u5199","title":"\u9879\u76ee\u5b9e\u4f8b"},{"location":"encode/","text":"\u7279\u5f81\u7f16\u7801 \u5bf9\u6570\u636e\u4e2d\u5206\u7c7b\u53d8\u91cf\u8fdb\u884c\u7279\u5f81\u7f16\u7801\uff0c\u4f7f\u5b57\u7b26\u578b\u6570\u636e\u80fd\u88ab\u673a\u5668\u5b66\u4e60\u6a21\u578b\u4f7f\u7528\u3002 \u7f16\u7801\u8003\u8651\u4e24\u79cd\u65b9\u6cd5\uff1a Onehot-encoding\uff1a\u72ec\u70ed\u7f16\u7801\uff0c\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5217\u3002 Target-encoding\uff1a\u6309\u7c7b\u522b\u5e73\u5747\u76ee\u6807\u503c\u8fdb\u884c\u7f16\u7801\u3002 $$ u = \\frac {n x+m w} {n+m} $$ u\u4e3a\u76ee\u6807\u7f16\u7801\u503c n\u4e3a\u7c7b\u522b\u4e2d\u503c\u7684\u4e2a\u6570 x\u4e3a\u7c7b\u522b\u4e2d\u5f85\u7f16\u7801\u503c\u5bf9\u5e94\u76ee\u6807\u503c\u7684\u5e73\u5747 m\u4e3a\u5168\u5c40\u5e73\u5747\u7684\u6743\u91cd w\u4e3a\u5168\u5c40\u5e73\u5747\u503c \u9879\u76ee\u5b9e\u4f8b \u5728\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u4e24\u79cd\u7f16\u7801\u65b9\u5f0f\u5747\u53ef\u9009\u62e9\uff0c\u9ed8\u8ba4\u4e3aTarget-encoding\uff0c\u51cf\u5c11\u6570\u636e\u89c4\u6a21\u5e76\u63d0\u9ad8\u53ef\u89e3\u91ca\u6027\u3002 Onehot-encoding \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b from sklearn.preprocessing import OneHotEncoder onehot = OneHotEncoder() onehot.fit(data[cols['str']]) tmp_matrix=onehot.transform(data[cols['str']]).toarray() data_category = pd.DataFrame(tmp_matrix,columns=onehot.get_feature_names()) Target-encoding def target_encoding(data, group, target, m): # Compute the global mean mean = data[target].mean() # Compute the number of values and the mean of each group agg = data.groupby(group)[target].agg(['count', 'mean']) counts = agg['count'] means = agg['mean'] # Compute the \"smoothed\" means smooth = (counts * means + m * mean) / (counts + m) # Replace each value by the according smoothed mean return data[group].map(smooth)","title":"\u6570\u636e\u7f16\u7801"},{"location":"encode/#_1","text":"\u5bf9\u6570\u636e\u4e2d\u5206\u7c7b\u53d8\u91cf\u8fdb\u884c\u7279\u5f81\u7f16\u7801\uff0c\u4f7f\u5b57\u7b26\u578b\u6570\u636e\u80fd\u88ab\u673a\u5668\u5b66\u4e60\u6a21\u578b\u4f7f\u7528\u3002 \u7f16\u7801\u8003\u8651\u4e24\u79cd\u65b9\u6cd5\uff1a Onehot-encoding\uff1a\u72ec\u70ed\u7f16\u7801\uff0c\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5217\u3002 Target-encoding\uff1a\u6309\u7c7b\u522b\u5e73\u5747\u76ee\u6807\u503c\u8fdb\u884c\u7f16\u7801\u3002 $$ u = \\frac {n x+m w} {n+m} $$ u\u4e3a\u76ee\u6807\u7f16\u7801\u503c n\u4e3a\u7c7b\u522b\u4e2d\u503c\u7684\u4e2a\u6570 x\u4e3a\u7c7b\u522b\u4e2d\u5f85\u7f16\u7801\u503c\u5bf9\u5e94\u76ee\u6807\u503c\u7684\u5e73\u5747 m\u4e3a\u5168\u5c40\u5e73\u5747\u7684\u6743\u91cd w\u4e3a\u5168\u5c40\u5e73\u5747\u503c","title":"\u7279\u5f81\u7f16\u7801"},{"location":"encode/#_2","text":"\u5728\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u4e24\u79cd\u7f16\u7801\u65b9\u5f0f\u5747\u53ef\u9009\u62e9\uff0c\u9ed8\u8ba4\u4e3aTarget-encoding\uff0c\u51cf\u5c11\u6570\u636e\u89c4\u6a21\u5e76\u63d0\u9ad8\u53ef\u89e3\u91ca\u6027\u3002 Onehot-encoding \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b from sklearn.preprocessing import OneHotEncoder onehot = OneHotEncoder() onehot.fit(data[cols['str']]) tmp_matrix=onehot.transform(data[cols['str']]).toarray() data_category = pd.DataFrame(tmp_matrix,columns=onehot.get_feature_names()) Target-encoding def target_encoding(data, group, target, m): # Compute the global mean mean = data[target].mean() # Compute the number of values and the mean of each group agg = data.groupby(group)[target].agg(['count', 'mean']) counts = agg['count'] means = agg['mean'] # Compute the \"smoothed\" means smooth = (counts * means + m * mean) / (counts + m) # Replace each value by the according smoothed mean return data[group].map(smooth)","title":"\u9879\u76ee\u5b9e\u4f8b"},{"location":"feature_selection/","text":"\u7279\u5f81\u9009\u62e9 \u7279\u5f81\u9009\u62e9\u662f\u5bf9\u8f93\u5165\u6570\u636e\u7684\u7279\u5f81\u8fdb\u884c\u7b5b\u9009\uff0c\u5254\u9664\u4e00\u4e9b\u91cd\u8981\u6027\u8f83\u4f4e\u7684\u7279\u5f81\uff0c\u964d\u4f4e\u6a21\u578b\u8bad\u7ec3\u590d\u6742\u5ea6\u5e76\u63d0\u9ad8\u6a21\u578b\u6027\u80fd\u7684\u4e00\u79cd\u7279\u5f81\u5904\u7406\u65b9\u6cd5\u3002 \u5305\u62ec\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a \u7279\u5f81\u6392\u5e8f \u7279\u5f81\u5220\u9664 \u7279\u5f81\u6392\u5e8f \u9009\u62e9\u4e86sklearn\u4e2d\u9002\u5408\u56de\u5f52\u6a21\u578b\u7684\u516d\u79cd\u7279\u5f81\u9009\u62e9\u65b9\u5f0f\uff0c\u5bf9\u7279\u5f81\u8fdb\u884c\u6392\u5e8f\uff0c\u6bcf\u4e2a\u6a21\u578b\u8fd4\u56de\u4e00\u7ec4\u7279\u5f81\u91cd\u8981\u6027\u6392\u5e8f\u3002\u516d\u79cd\u7279\u5f81\u9009\u62e9\u65b9\u5f0f\u5206\u522b\u4e3a\uff1a f_regression:\u4ee5\u65b9\u5dee\u5206\u6790\u4e3a\u57fa\u7840\uff0c\u5bf9\u7279\u5f81\u8fdb\u884c\u6392\u5e8f mutual_info_regression:\u4f30\u8ba1\u76ee\u6807\u53d8\u91cf\u7684\u4e92\u4fe1\u606f\u3002\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u4e4b\u95f4\u7684\u4e92\u4fe1\u606f\u662f\u975e\u8d1f\u7684\uff0c\u5b83\u5ea6\u91cf\u4e86\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u76f8\u4e92\u72ec\u7acb\u65f6\uff0c\u5b83\u7b49\u4e8e\u96f6\uff0c\u4e14\u8d8a\u9ad8\u7684\u503c\u610f\u5473\u7740\u8d8a\u9ad8\u7684\u76f8\u4f9d\u6027 RFE+LR:RFE\u4f7f\u7528\u4f5c\u4e3a\u5916\u90e8\u6a21\u578b RFE+LassoCV:RFE\u4f7f\u7528Lasso\u56de\u5f52\u4f5c\u4e3a\u5916\u90e8\u6a21\u578b RFE+RidgeCV:RFE\u4f7f\u7528\u5cad\u56de\u5f52\u4f5c\u4e3a\u5916\u90e8\u6a21\u578b RFE+RFR:RFE\u4f7f\u7528\u968f\u673a\u68ee\u6797\u4f5c\u4e3a\u5916\u90e8\u6a21\u578b \u6ce8\uff1aRFE\u53c8\u540d\u9012\u5f52\u7279\u5f81\u6d88\u9664\uff0c\u5b83\u4f7f\u7528\u4e00\u4e2a\u5916\u90e8\u4f30\u8ba1\u5668\u6765\u5206\u914d\u7279\u5f81\u7684\u6743\u91cd\uff0c\u7136\u540e\u9012\u5f52\u5220\u9664\u6700\u4e0d\u91cd\u8981\u7684\u7279\u5f81\uff0c\u4ee5\u6b64\u83b7\u5f97\u8d8a\u6765\u8d8a\u5c11\u7684\u7279\u5f81\u96c6\u3002\u901a\u8fc7\u8f93\u5165\u4e0d\u540c\u7684\u6a21\u578b\u7ed9RFE\u4f5c\u4e3a\u6743\u91cd\u9009\u62e9\u5668\uff0c\u884d\u751f\u51fa\u4e0d\u540c\u7684\u7279\u5f81\u9009\u62e9\u65b9\u6848 \u7279\u5f81\u5220\u9664 \u901a\u8fc76\u79cd\u7279\u5f81\u9009\u62e9\u7b97\u6cd5\u83b7\u5f97\u4e866\u7ec4\u7279\u5f81\u6392\u5e8f\u3002\u901a\u8fc7\u91c7\u53d6\u6295\u7968\u6cd5\u5224\u65ad\u7279\u5f81\u662f\u5426\u8981\u4fdd\u7559\uff0c\u5047\u8bbe\u8981\u4fdd\u7559\u7684\u6700\u7ec8\u7279\u5f81\u6570\u4e3aN\u3002\u52196\u4e2a\u6392\u5e8f\u5206\u522b\u5bf9\u6bcf\u4e2a\u7279\u5f81\u7ed9\u51fa\u7ed3\u679c\uff1a0\uff08\u8be5\u7279\u5f81\u6392\u5e8f\u6570\u4e0d\u5728\u524dN\u4f4d\uff09\u62161\uff08\u8be5\u7279\u5f81\u6392\u5e8f\u6570\u5728\u524dN\u4f4d\uff09\u3002\u6700\u540e\u6839\u636e\u6bcf\u4e2a\u7279\u5f81\u83b7\u5f97\u7684\u7968\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u4fdd\u7559\u6700\u7ec8\u524dN\u4e2a\u7279\u5f81\uff08\u7968\u6570\u76f8\u540c\u770b\u5206\u6392\u540d\u603b\u548c\uff0c\u5206\u6392\u540d\u4e4b\u548c\u9760\u524d\u7684\u4f18\u5148\uff09 \u8bf4\u660e \u7279\u5f81\u9009\u62e9\u6a21\u5757\u5c01\u88c5\u5728FeatureSelection\u6a21\u5757\u4e2d\uff0c\u4f4d\u4e8e\u6570\u636e\u9884\u5904\u7406part1\u3001\u5f02\u5e38\u68c0\u6d4bpart2\u3001\u7279\u5f81\u7f16\u7801part3\u4e4b\u540e\uff0c\u662f\u7b2c\u56db\u4e2a\u6a21\u5757\uff0c\u9664\u4e86\u4e4b\u524d\u6a21\u5757\u6240\u5fc5\u987b\u7684\u53c2\u6570\u4e4b\u5916\uff0c\u8be5\u6a21\u578b\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u989d\u5916\u53c2\u6570num_of_feature\uff0c\u5373\u6700\u7ec8\u4fdd\u7559\u7684\u7279\u5f81\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a15\u3002","title":"\u7279\u5f81\u9009\u62e9"},{"location":"feature_selection/#_1","text":"\u7279\u5f81\u9009\u62e9\u662f\u5bf9\u8f93\u5165\u6570\u636e\u7684\u7279\u5f81\u8fdb\u884c\u7b5b\u9009\uff0c\u5254\u9664\u4e00\u4e9b\u91cd\u8981\u6027\u8f83\u4f4e\u7684\u7279\u5f81\uff0c\u964d\u4f4e\u6a21\u578b\u8bad\u7ec3\u590d\u6742\u5ea6\u5e76\u63d0\u9ad8\u6a21\u578b\u6027\u80fd\u7684\u4e00\u79cd\u7279\u5f81\u5904\u7406\u65b9\u6cd5\u3002 \u5305\u62ec\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a \u7279\u5f81\u6392\u5e8f \u7279\u5f81\u5220\u9664","title":"\u7279\u5f81\u9009\u62e9"},{"location":"feature_selection/#_2","text":"\u9009\u62e9\u4e86sklearn\u4e2d\u9002\u5408\u56de\u5f52\u6a21\u578b\u7684\u516d\u79cd\u7279\u5f81\u9009\u62e9\u65b9\u5f0f\uff0c\u5bf9\u7279\u5f81\u8fdb\u884c\u6392\u5e8f\uff0c\u6bcf\u4e2a\u6a21\u578b\u8fd4\u56de\u4e00\u7ec4\u7279\u5f81\u91cd\u8981\u6027\u6392\u5e8f\u3002\u516d\u79cd\u7279\u5f81\u9009\u62e9\u65b9\u5f0f\u5206\u522b\u4e3a\uff1a f_regression:\u4ee5\u65b9\u5dee\u5206\u6790\u4e3a\u57fa\u7840\uff0c\u5bf9\u7279\u5f81\u8fdb\u884c\u6392\u5e8f mutual_info_regression:\u4f30\u8ba1\u76ee\u6807\u53d8\u91cf\u7684\u4e92\u4fe1\u606f\u3002\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u4e4b\u95f4\u7684\u4e92\u4fe1\u606f\u662f\u975e\u8d1f\u7684\uff0c\u5b83\u5ea6\u91cf\u4e86\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u76f8\u4e92\u72ec\u7acb\u65f6\uff0c\u5b83\u7b49\u4e8e\u96f6\uff0c\u4e14\u8d8a\u9ad8\u7684\u503c\u610f\u5473\u7740\u8d8a\u9ad8\u7684\u76f8\u4f9d\u6027 RFE+LR:RFE\u4f7f\u7528\u4f5c\u4e3a\u5916\u90e8\u6a21\u578b RFE+LassoCV:RFE\u4f7f\u7528Lasso\u56de\u5f52\u4f5c\u4e3a\u5916\u90e8\u6a21\u578b RFE+RidgeCV:RFE\u4f7f\u7528\u5cad\u56de\u5f52\u4f5c\u4e3a\u5916\u90e8\u6a21\u578b RFE+RFR:RFE\u4f7f\u7528\u968f\u673a\u68ee\u6797\u4f5c\u4e3a\u5916\u90e8\u6a21\u578b \u6ce8\uff1aRFE\u53c8\u540d\u9012\u5f52\u7279\u5f81\u6d88\u9664\uff0c\u5b83\u4f7f\u7528\u4e00\u4e2a\u5916\u90e8\u4f30\u8ba1\u5668\u6765\u5206\u914d\u7279\u5f81\u7684\u6743\u91cd\uff0c\u7136\u540e\u9012\u5f52\u5220\u9664\u6700\u4e0d\u91cd\u8981\u7684\u7279\u5f81\uff0c\u4ee5\u6b64\u83b7\u5f97\u8d8a\u6765\u8d8a\u5c11\u7684\u7279\u5f81\u96c6\u3002\u901a\u8fc7\u8f93\u5165\u4e0d\u540c\u7684\u6a21\u578b\u7ed9RFE\u4f5c\u4e3a\u6743\u91cd\u9009\u62e9\u5668\uff0c\u884d\u751f\u51fa\u4e0d\u540c\u7684\u7279\u5f81\u9009\u62e9\u65b9\u6848","title":"\u7279\u5f81\u6392\u5e8f"},{"location":"feature_selection/#_3","text":"\u901a\u8fc76\u79cd\u7279\u5f81\u9009\u62e9\u7b97\u6cd5\u83b7\u5f97\u4e866\u7ec4\u7279\u5f81\u6392\u5e8f\u3002\u901a\u8fc7\u91c7\u53d6\u6295\u7968\u6cd5\u5224\u65ad\u7279\u5f81\u662f\u5426\u8981\u4fdd\u7559\uff0c\u5047\u8bbe\u8981\u4fdd\u7559\u7684\u6700\u7ec8\u7279\u5f81\u6570\u4e3aN\u3002\u52196\u4e2a\u6392\u5e8f\u5206\u522b\u5bf9\u6bcf\u4e2a\u7279\u5f81\u7ed9\u51fa\u7ed3\u679c\uff1a0\uff08\u8be5\u7279\u5f81\u6392\u5e8f\u6570\u4e0d\u5728\u524dN\u4f4d\uff09\u62161\uff08\u8be5\u7279\u5f81\u6392\u5e8f\u6570\u5728\u524dN\u4f4d\uff09\u3002\u6700\u540e\u6839\u636e\u6bcf\u4e2a\u7279\u5f81\u83b7\u5f97\u7684\u7968\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u4fdd\u7559\u6700\u7ec8\u524dN\u4e2a\u7279\u5f81\uff08\u7968\u6570\u76f8\u540c\u770b\u5206\u6392\u540d\u603b\u548c\uff0c\u5206\u6392\u540d\u4e4b\u548c\u9760\u524d\u7684\u4f18\u5148\uff09","title":"\u7279\u5f81\u5220\u9664"},{"location":"feature_selection/#_4","text":"\u7279\u5f81\u9009\u62e9\u6a21\u5757\u5c01\u88c5\u5728FeatureSelection\u6a21\u5757\u4e2d\uff0c\u4f4d\u4e8e\u6570\u636e\u9884\u5904\u7406part1\u3001\u5f02\u5e38\u68c0\u6d4bpart2\u3001\u7279\u5f81\u7f16\u7801part3\u4e4b\u540e\uff0c\u662f\u7b2c\u56db\u4e2a\u6a21\u5757\uff0c\u9664\u4e86\u4e4b\u524d\u6a21\u5757\u6240\u5fc5\u987b\u7684\u53c2\u6570\u4e4b\u5916\uff0c\u8be5\u6a21\u578b\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u989d\u5916\u53c2\u6570num_of_feature\uff0c\u5373\u6700\u7ec8\u4fdd\u7559\u7684\u7279\u5f81\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a15\u3002","title":"\u8bf4\u660e"},{"location":"fucset/","text":"\u5f02\u5e38\u68c0\u6d4b \u68c0\u6d4b\u6570\u636e\u96c6\u4e2d\u7684\u5f02\u5e38\u6570\u636e\u5e76\u5254\u9664\u3002 \u4e3b\u8981\u4f7f\u7528\u5b64\u7acb\u68ee\u6797\u7684\u65b9\u6cd5: \u5b64\u7acb\u68ee\u6797\u6cd5\uff08Isolation Forest\uff09\u662f\u4e00\u79cd\u88ab\u5e7f\u6cdb\u91c7\u7528\u7684\u96c6\u6210\u5f02\u5e38\u68c0\u6d4b\u7b97\u6cd5\u3002\u5b64\u7acb\u68ee\u6797\u7531\u4e00\u7cfb\u5217\u5b64\u7acb \u6811\u7ec4\u6210\uff0c\u6bcf\u4e00\u9897\u5b64\u7acb\u6811\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u6784\u3002\u5177\u4f53\u5b9e\u73b0\u6b65\u9aa4\u5982\u4e0b\uff1a \u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u5b9a\u6570\u91cf\u6837\u672c\u4f5c\u4e3a\u5b50\u7a7a\u95f4\u653e\u5165\u5b64\u7acb\u6811\u6839\u8282\u70b9 \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5e76\u968f\u673a\u4ea7\u751f\u5207\u5272\u70b9\u5c06\u6570\u636e\u5728\u6b64\u7ef4\u5ea6\u4e0b\u5207\u5206\u4e3a\u4e24\u4e2a\u5b50\u96c6\u3002 \u9012\u5f52\u4e0a\u4e00\u6b65\u9aa4\u76f4\u5230\u5b50\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u6837\u672c\u70b9\u6216\u8005\u5b64\u7acb\u6811\u8fbe\u5230\u6307\u5b9a\u9ad8\u5ea6 \u5faa\u73af\u4e0a\u8ff0\u6b65\u9aa4\u76f4\u5230\u751f\u6210\u4e86\u6307\u5b9a\u4e2a\u6570\u7684\u5b64\u7acb\u6811 \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u70b9\uff0c\u8ba1\u7b97\u5176\u5728\u6bcf\u68f5\u6811\u7684\u9ad8\u5ea6\u5e76\u53d6\u5e73\u5747\u503c\uff0c\u5f97\u5230\u5f02\u5e38\u5206\u6570 \u8bbe\u5b9a\u9608\u503c\u5224\u65ad\u6570\u636e\u5f02\u5e38\u3002 \u9879\u76ee\u5b9e\u4f8b \u5728\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u8c03\u7528sklearn\u4e2d\u7684\u96c6\u6210\u6a21\u578bIsolationForest\u5b8c\u6210\u5f02\u5e38\u68c0\u6d4b\u529f\u80fd\uff0c\u5e76\u4f7f\u7528matplotlib\u8fdb\u884c\u753b\u56fe\u3002 \u7531\u4e8e\u4e00\u6b21\u68c0\u6d4b\u5177\u6709\u5076\u7136\u6027\uff0c\u56e0\u6b64\u8fdb\u884c\u591a\u6b21\u68c0\u6d4b\u8fed\u4ee3\u3002\u5f53\u68c0\u6d4b\u7ed3\u679c\u7a33\u5b9a\u65f6\uff0c\u7ec8\u6b62\u68c0\u6d4b\uff0c\u5e76\u5254\u9664\u5f02\u5e38\u6570\u636e\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a from sklearn.ensemble import IsolationForest clf = IsolationForest(behaviour='new', contamination='auto') pred = clf.fit_predict(data) data['Outlier'] = pred tmp = list((set(res) & set(list(data[data['Outlier']==-1].index)))) if len(tmp) == len(res): plt_anomaly(data,ylabel,path) data.drop(res, inplace=True) data.reset_index(drop=True, inplace=True) break else\uff1a res = tmp data.drop('Outlier', axis=1, inplace=True) \u753b\u56fe\u793a\u4f8b\u5982\u4e0b\uff1a \u7279\u5f81\u7f16\u7801 \u5bf9\u6570\u636e\u4e2d\u5206\u7c7b\u53d8\u91cf\u8fdb\u884c\u7279\u5f81\u7f16\u7801\uff0c\u4f7f\u5b57\u7b26\u578b\u6570\u636e\u80fd\u88ab\u673a\u5668\u5b66\u4e60\u6a21\u578b\u4f7f\u7528\u3002 \u7f16\u7801\u8003\u8651\u4e24\u79cd\u65b9\u6cd5\uff1a * Onehot-encoding\uff1a\u72ec\u70ed\u7f16\u7801\uff0c\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5217\u3002 * Target-encoding\uff1a\u6309\u7c7b\u522b\u5e73\u5747\u76ee\u6807\u503c\u8fdb\u884c\u7f16\u7801\u3002 $$ u = \\frac {n x+m w} {n+m} $$ - u\u4e3a\u76ee\u6807\u7f16\u7801\u503c - n\u4e3a\u7c7b\u522b\u4e2d\u503c\u7684\u4e2a\u6570 - x\u4e3a\u7c7b\u522b\u4e2d\u5f85\u7f16\u7801\u503c\u5bf9\u5e94\u76ee\u6807\u503c\u7684\u5e73\u5747 - m\u4e3a\u5168\u5c40\u5e73\u5747\u7684\u6743\u91cd - w\u4e3a\u5168\u5c40\u5e73\u5747\u503c \u9879\u76ee\u5b9e\u4f8b \u5728\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u4e24\u79cd\u7f16\u7801\u65b9\u5f0f\u5747\u53ef\u9009\u62e9\uff0c\u9ed8\u8ba4\u4e3aTarget-encoding\uff0c\u51cf\u5c11\u6570\u636e\u89c4\u6a21\u5e76\u63d0\u9ad8\u53ef\u89e3\u91ca\u6027\u3002 - Onehot-encoding \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b from sklearn.preprocessing import OneHotEncoder onehot = OneHotEncoder() onehot.fit(data[cols['str']]) tmp_matrix=onehot.transform(data[cols['str']]).toarray() data_category = pd.DataFrame(tmp_matrix,columns=onehot.get_feature_names()) Target-encoding def target_encoding(data, group, target, m): # Compute the global mean mean = data[target].mean() # Compute the number of values and the mean of each group agg = data.groupby(group)[target].agg(['count', 'mean']) counts = agg['count'] means = agg['mean'] # Compute the \"smoothed\" means smooth = (counts * means + m * mean) / (counts + m) # Replace each value by the according smoothed mean return data[group].map(smooth)","title":"\u5f02\u5e38\u68c0\u6d4b"},{"location":"fucset/#_1","text":"\u68c0\u6d4b\u6570\u636e\u96c6\u4e2d\u7684\u5f02\u5e38\u6570\u636e\u5e76\u5254\u9664\u3002 \u4e3b\u8981\u4f7f\u7528\u5b64\u7acb\u68ee\u6797\u7684\u65b9\u6cd5: \u5b64\u7acb\u68ee\u6797\u6cd5\uff08Isolation Forest\uff09\u662f\u4e00\u79cd\u88ab\u5e7f\u6cdb\u91c7\u7528\u7684\u96c6\u6210\u5f02\u5e38\u68c0\u6d4b\u7b97\u6cd5\u3002\u5b64\u7acb\u68ee\u6797\u7531\u4e00\u7cfb\u5217\u5b64\u7acb \u6811\u7ec4\u6210\uff0c\u6bcf\u4e00\u9897\u5b64\u7acb\u6811\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u6784\u3002\u5177\u4f53\u5b9e\u73b0\u6b65\u9aa4\u5982\u4e0b\uff1a \u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u5b9a\u6570\u91cf\u6837\u672c\u4f5c\u4e3a\u5b50\u7a7a\u95f4\u653e\u5165\u5b64\u7acb\u6811\u6839\u8282\u70b9 \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5e76\u968f\u673a\u4ea7\u751f\u5207\u5272\u70b9\u5c06\u6570\u636e\u5728\u6b64\u7ef4\u5ea6\u4e0b\u5207\u5206\u4e3a\u4e24\u4e2a\u5b50\u96c6\u3002 \u9012\u5f52\u4e0a\u4e00\u6b65\u9aa4\u76f4\u5230\u5b50\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u6837\u672c\u70b9\u6216\u8005\u5b64\u7acb\u6811\u8fbe\u5230\u6307\u5b9a\u9ad8\u5ea6 \u5faa\u73af\u4e0a\u8ff0\u6b65\u9aa4\u76f4\u5230\u751f\u6210\u4e86\u6307\u5b9a\u4e2a\u6570\u7684\u5b64\u7acb\u6811 \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u70b9\uff0c\u8ba1\u7b97\u5176\u5728\u6bcf\u68f5\u6811\u7684\u9ad8\u5ea6\u5e76\u53d6\u5e73\u5747\u503c\uff0c\u5f97\u5230\u5f02\u5e38\u5206\u6570 \u8bbe\u5b9a\u9608\u503c\u5224\u65ad\u6570\u636e\u5f02\u5e38\u3002","title":"\u5f02\u5e38\u68c0\u6d4b"},{"location":"fucset/#_2","text":"\u5728\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u8c03\u7528sklearn\u4e2d\u7684\u96c6\u6210\u6a21\u578bIsolationForest\u5b8c\u6210\u5f02\u5e38\u68c0\u6d4b\u529f\u80fd\uff0c\u5e76\u4f7f\u7528matplotlib\u8fdb\u884c\u753b\u56fe\u3002 \u7531\u4e8e\u4e00\u6b21\u68c0\u6d4b\u5177\u6709\u5076\u7136\u6027\uff0c\u56e0\u6b64\u8fdb\u884c\u591a\u6b21\u68c0\u6d4b\u8fed\u4ee3\u3002\u5f53\u68c0\u6d4b\u7ed3\u679c\u7a33\u5b9a\u65f6\uff0c\u7ec8\u6b62\u68c0\u6d4b\uff0c\u5e76\u5254\u9664\u5f02\u5e38\u6570\u636e\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a from sklearn.ensemble import IsolationForest clf = IsolationForest(behaviour='new', contamination='auto') pred = clf.fit_predict(data) data['Outlier'] = pred tmp = list((set(res) & set(list(data[data['Outlier']==-1].index)))) if len(tmp) == len(res): plt_anomaly(data,ylabel,path) data.drop(res, inplace=True) data.reset_index(drop=True, inplace=True) break else\uff1a res = tmp data.drop('Outlier', axis=1, inplace=True) \u753b\u56fe\u793a\u4f8b\u5982\u4e0b\uff1a","title":"\u9879\u76ee\u5b9e\u4f8b"},{"location":"fucset/#_3","text":"\u5bf9\u6570\u636e\u4e2d\u5206\u7c7b\u53d8\u91cf\u8fdb\u884c\u7279\u5f81\u7f16\u7801\uff0c\u4f7f\u5b57\u7b26\u578b\u6570\u636e\u80fd\u88ab\u673a\u5668\u5b66\u4e60\u6a21\u578b\u4f7f\u7528\u3002 \u7f16\u7801\u8003\u8651\u4e24\u79cd\u65b9\u6cd5\uff1a * Onehot-encoding\uff1a\u72ec\u70ed\u7f16\u7801\uff0c\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5217\u3002 * Target-encoding\uff1a\u6309\u7c7b\u522b\u5e73\u5747\u76ee\u6807\u503c\u8fdb\u884c\u7f16\u7801\u3002 $$ u = \\frac {n x+m w} {n+m} $$ - u\u4e3a\u76ee\u6807\u7f16\u7801\u503c - n\u4e3a\u7c7b\u522b\u4e2d\u503c\u7684\u4e2a\u6570 - x\u4e3a\u7c7b\u522b\u4e2d\u5f85\u7f16\u7801\u503c\u5bf9\u5e94\u76ee\u6807\u503c\u7684\u5e73\u5747 - m\u4e3a\u5168\u5c40\u5e73\u5747\u7684\u6743\u91cd - w\u4e3a\u5168\u5c40\u5e73\u5747\u503c","title":"\u7279\u5f81\u7f16\u7801"},{"location":"fucset/#_4","text":"\u5728\u9879\u76ee\u5b9e\u4f8b\u4e2d\uff0c\u4e24\u79cd\u7f16\u7801\u65b9\u5f0f\u5747\u53ef\u9009\u62e9\uff0c\u9ed8\u8ba4\u4e3aTarget-encoding\uff0c\u51cf\u5c11\u6570\u636e\u89c4\u6a21\u5e76\u63d0\u9ad8\u53ef\u89e3\u91ca\u6027\u3002 - Onehot-encoding \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b from sklearn.preprocessing import OneHotEncoder onehot = OneHotEncoder() onehot.fit(data[cols['str']]) tmp_matrix=onehot.transform(data[cols['str']]).toarray() data_category = pd.DataFrame(tmp_matrix,columns=onehot.get_feature_names()) Target-encoding def target_encoding(data, group, target, m): # Compute the global mean mean = data[target].mean() # Compute the number of values and the mean of each group agg = data.groupby(group)[target].agg(['count', 'mean']) counts = agg['count'] means = agg['mean'] # Compute the \"smoothed\" means smooth = (counts * means + m * mean) / (counts + m) # Replace each value by the according smoothed mean return data[group].map(smooth)","title":"\u9879\u76ee\u5b9e\u4f8b"},{"location":"train_predict/","text":"\u6a21\u578b\u8bad\u7ec3\u4e0e\u9884\u6d4b \u6a21\u578b\u8bad\u7ec3 \u5728\u5b8c\u6210\u7279\u5f81\u5de5\u7a0b\uff0c\u5f02\u5e38\u68c0\u6d4b\uff0c\u7279\u5f81\u7f16\u7801\uff0c\u7279\u5f81\u9009\u62e9\u4e4b\u540e\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u3002\u57fa\u4e8e\u4e4b\u524d\u7684\u8c03\u7814\uff0c\u9009\u62e9\u4e86BayesianRidgeRegression\uff0cLassoRegression,GradientBoostingRegression,BaggingRegression,XGBoostRegressor\u4e94\u79cd\u6a21\u578b\u3002 \u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a class Model(luigi.Task): def requires(self): return FeatureSelection(is_need=self.is_need, type_of_dataset=self.type_of_dataset, name_of_dataset=self.name_of_dataset, name_of_target=self.name_of_target, type_of_encoding=self.type_of_encoding, cols_num=self.cols_num,num_of_feature=self.num_of_feature) def output(self): return {'model' : luigi.LocalTarget('Model/{0}/{1}/{1}_{2}.pkl'.format(self.type_of_dataset, self.name_of_dataset, self.name_of_model), format=luigi.format.Nop), 'log' : luigi.LocalTarget('Model/{0}/{1}/{1}_{2}_log.txt'.format(self.type_of_dataset, self.name_of_dataset, self.name_of_model)), 'train_X': luigi.LocalTarget('Model/{0}/{1}/{1}_{2}_train_X.csv'.format(self.type_of_dataset, self.name_of_dataset, self.name_of_model))} def run(self): data = pd.read_csv(self.input()['data'].path) model_instance = Model_train(data, self.name_of_target, type_of_dataset=self.type_of_dataset, name_of_dataset=self.name_of_dataset, name_of_model=self.name_of_model) if self.name_of_model == 'bayesianridge': train, test_result, train_X = model_instance.BRreg() elif self.name_of_model == 'lasso': train, test_result, train_X = model_instance.Lreg() elif self.name_of_model =='gradientboosting': train, test_result, train_X = model_instance.GBreg() elif self.name_of_model =='bagging': train, test_result, train_X = model_instance.Breg() elif self.name_of_model =='xgboost': train, test_result, train_X = model_instance.XGBreg() else: pass with self.output()['model'].open('wb') as f: joblib.dump(train, f) with self.output()['log'].open('w') as f: for key, values in test_result.items(): f.write(key + ' ' + str(round(values, 3)) + '\\n') with self.output()['train_X'].open('w') as f: train_X.to_csv(f,index=False) \u8fd0\u884c\u5982\u4e0b\u6307\u4ee4\uff0c\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3 $ python main.py --local-scheduler Model --name-of-model=\"*\" --name-of-dataset=\"&\" \u5176\u4e2d&\u5904\u4e3a\u5df2\u7ecf\u5b8c\u6210\u7f16\u7801\u7684\u6570\u636e\u96c6\u540d\u79f0\uff0c*\u5904\u76ee\u524d\u53ef\u9009\u62e9bayesianridge\uff0classo\uff0cgradientboosting\uff0cbagging\uff0cxgboost\u3002\u5728\u4e0d\u6307\u5b9a\u6a21\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u6a21\u578b\u8bbe\u7f6e\u4e3axgboost\u3002 \u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4ee5\u53ca\u8bad\u7ec3\u7684\u65e5\u5fd7\u6570\u636e\u4fdd\u5b58\u5728Model\u76ee\u5f55\u4e0b\u3002 \u4f8b\u5982\uff0c\u6570\u636e\u96c6'used_house_data_test'\u5c5e\u4e8eHouse\u7c7b\uff0c\u5c06\u8be5\u6570\u636e\u96c6\u8f7d\u5165\u4e0d\u540c\u7684\u6a21\u578b\u751f\u6210\u7684\u6240\u6709\u6587\u4ef6\u90fd\u4fdd\u5b58\u5728Model/House/used_house_data_test\u76ee\u5f55\u4e0b\u3002 \u8be5\u76ee\u5f55\u4e0b\uff0c\u6709 used_house_data_test_bayesianridge.pkl\u7b49\u4fdd\u5b58\u8bad\u7ec3\u597d\u7684\u6a21\u578b used_house_data_test_bayesianridge_log.txt\u7b49\u8bb0\u5f55\u6a21\u578b\u6307\u6807RMSE,R2,MAE\u3002 \u6a21\u578b\u9884\u6d4b \u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a class Prediction(luigi.Task): def requires(self): return Model(is_need=self.is_need, type_of_dataset=self.type_of_dataset, name_of_dataset=self.name_of_dataset, name_of_target=self.name_of_target, type_of_encoding=self.type_of_encoding, name_of_model = self.name_of_model, cols_num = self.cols_num) def output(self): pass def run(self): predictor = joblib.load(self.input()['model'].path) data = pd.read_csv('Dataset/{0}/{1}/{2}.csv'.format(self.type_of_dataset, self.name_of_dataset, name_of_dataset_prediction)) result = predictor.predict(data.drop([self.name_of_target],axis=1)) np.savetxt('./Result/result.csv',result,delimiter=',',fmt='%f') pass \u8fd0\u884c\u6307\u4ee4 python main.py --local-scheduler Prediction --name-of-dataset-prediction=\"\uffe5\" --name-of-target=\"#\" \u5176\u4e2d\uff0c\uffe5\u5904\u4e3a\u65b0\u751f\u6210\u7684csv\u6587\u4ef6\u540d\uff0c#\u5904\u4e3a\u9884\u6d4b\u6807\u7b7e\u540d\uff0c\u4f8b\u5982Final_Price \u9884\u6d4b\u751f\u6210\u7684\u6587\u4ef6result.csv\u4fdd\u5b58\u5728Result\u76ee\u5f55\u3002","title":"\u6a21\u578b\u8bad\u7ec3\u4e0e\u9884\u6d4b"},{"location":"train_predict/#_1","text":"","title":"\u6a21\u578b\u8bad\u7ec3\u4e0e\u9884\u6d4b"},{"location":"train_predict/#_2","text":"\u5728\u5b8c\u6210\u7279\u5f81\u5de5\u7a0b\uff0c\u5f02\u5e38\u68c0\u6d4b\uff0c\u7279\u5f81\u7f16\u7801\uff0c\u7279\u5f81\u9009\u62e9\u4e4b\u540e\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u3002\u57fa\u4e8e\u4e4b\u524d\u7684\u8c03\u7814\uff0c\u9009\u62e9\u4e86BayesianRidgeRegression\uff0cLassoRegression,GradientBoostingRegression,BaggingRegression,XGBoostRegressor\u4e94\u79cd\u6a21\u578b\u3002 \u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a class Model(luigi.Task): def requires(self): return FeatureSelection(is_need=self.is_need, type_of_dataset=self.type_of_dataset, name_of_dataset=self.name_of_dataset, name_of_target=self.name_of_target, type_of_encoding=self.type_of_encoding, cols_num=self.cols_num,num_of_feature=self.num_of_feature) def output(self): return {'model' : luigi.LocalTarget('Model/{0}/{1}/{1}_{2}.pkl'.format(self.type_of_dataset, self.name_of_dataset, self.name_of_model), format=luigi.format.Nop), 'log' : luigi.LocalTarget('Model/{0}/{1}/{1}_{2}_log.txt'.format(self.type_of_dataset, self.name_of_dataset, self.name_of_model)), 'train_X': luigi.LocalTarget('Model/{0}/{1}/{1}_{2}_train_X.csv'.format(self.type_of_dataset, self.name_of_dataset, self.name_of_model))} def run(self): data = pd.read_csv(self.input()['data'].path) model_instance = Model_train(data, self.name_of_target, type_of_dataset=self.type_of_dataset, name_of_dataset=self.name_of_dataset, name_of_model=self.name_of_model) if self.name_of_model == 'bayesianridge': train, test_result, train_X = model_instance.BRreg() elif self.name_of_model == 'lasso': train, test_result, train_X = model_instance.Lreg() elif self.name_of_model =='gradientboosting': train, test_result, train_X = model_instance.GBreg() elif self.name_of_model =='bagging': train, test_result, train_X = model_instance.Breg() elif self.name_of_model =='xgboost': train, test_result, train_X = model_instance.XGBreg() else: pass with self.output()['model'].open('wb') as f: joblib.dump(train, f) with self.output()['log'].open('w') as f: for key, values in test_result.items(): f.write(key + ' ' + str(round(values, 3)) + '\\n') with self.output()['train_X'].open('w') as f: train_X.to_csv(f,index=False) \u8fd0\u884c\u5982\u4e0b\u6307\u4ee4\uff0c\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3 $ python main.py --local-scheduler Model --name-of-model=\"*\" --name-of-dataset=\"&\" \u5176\u4e2d&\u5904\u4e3a\u5df2\u7ecf\u5b8c\u6210\u7f16\u7801\u7684\u6570\u636e\u96c6\u540d\u79f0\uff0c*\u5904\u76ee\u524d\u53ef\u9009\u62e9bayesianridge\uff0classo\uff0cgradientboosting\uff0cbagging\uff0cxgboost\u3002\u5728\u4e0d\u6307\u5b9a\u6a21\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u6a21\u578b\u8bbe\u7f6e\u4e3axgboost\u3002 \u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4ee5\u53ca\u8bad\u7ec3\u7684\u65e5\u5fd7\u6570\u636e\u4fdd\u5b58\u5728Model\u76ee\u5f55\u4e0b\u3002 \u4f8b\u5982\uff0c\u6570\u636e\u96c6'used_house_data_test'\u5c5e\u4e8eHouse\u7c7b\uff0c\u5c06\u8be5\u6570\u636e\u96c6\u8f7d\u5165\u4e0d\u540c\u7684\u6a21\u578b\u751f\u6210\u7684\u6240\u6709\u6587\u4ef6\u90fd\u4fdd\u5b58\u5728Model/House/used_house_data_test\u76ee\u5f55\u4e0b\u3002 \u8be5\u76ee\u5f55\u4e0b\uff0c\u6709 used_house_data_test_bayesianridge.pkl\u7b49\u4fdd\u5b58\u8bad\u7ec3\u597d\u7684\u6a21\u578b used_house_data_test_bayesianridge_log.txt\u7b49\u8bb0\u5f55\u6a21\u578b\u6307\u6807RMSE,R2,MAE\u3002","title":"\u6a21\u578b\u8bad\u7ec3"},{"location":"train_predict/#_3","text":"\u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a class Prediction(luigi.Task): def requires(self): return Model(is_need=self.is_need, type_of_dataset=self.type_of_dataset, name_of_dataset=self.name_of_dataset, name_of_target=self.name_of_target, type_of_encoding=self.type_of_encoding, name_of_model = self.name_of_model, cols_num = self.cols_num) def output(self): pass def run(self): predictor = joblib.load(self.input()['model'].path) data = pd.read_csv('Dataset/{0}/{1}/{2}.csv'.format(self.type_of_dataset, self.name_of_dataset, name_of_dataset_prediction)) result = predictor.predict(data.drop([self.name_of_target],axis=1)) np.savetxt('./Result/result.csv',result,delimiter=',',fmt='%f') pass \u8fd0\u884c\u6307\u4ee4 python main.py --local-scheduler Prediction --name-of-dataset-prediction=\"\uffe5\" --name-of-target=\"#\" \u5176\u4e2d\uff0c\uffe5\u5904\u4e3a\u65b0\u751f\u6210\u7684csv\u6587\u4ef6\u540d\uff0c#\u5904\u4e3a\u9884\u6d4b\u6807\u7b7e\u540d\uff0c\u4f8b\u5982Final_Price \u9884\u6d4b\u751f\u6210\u7684\u6587\u4ef6result.csv\u4fdd\u5b58\u5728Result\u76ee\u5f55\u3002","title":"\u6a21\u578b\u9884\u6d4b"}]}